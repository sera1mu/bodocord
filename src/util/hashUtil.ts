import { crypto } from "std/crypto";
import { Interaction } from "harmony";

/**
 * Generate hash with MD5 from text and convert to HEX string
 */
export const generateHash = async function generateHashWithMD5ConvertHEXString(
  text: string,
) {
  const encodedText = new TextEncoder().encode(text); // Encode text
  const hashBuffer = await crypto.subtle.digest("MD5", encodedText); // Digest encoded text
  const hashArray = Array.from(new Uint8Array(hashBuffer)); // Convert buffer to byte array
  const hashHex = hashArray.map((b) => b.toString(16).padStart(2, "0")).join(
    "",
  ); // Convert bytes to HEX string

  return hashHex;
};

/**
 * Generate a hash value of the error from interaction information.
 *
 * The hash value is generated by MD5.
 * This hash value is used to identify the error from the log.
 */
export const generateInteractionErrorHash =
  async function generateErrorHashFromInteractionInformation(i: Interaction) {
    const text = `t:${i.timestamp.toString},g:${i.guild?.id},c:${i.channel
      ?.id},i:${i.id}`; // t = timestamp, g = guild id, c = channel id, i = interaction id
    const hash = await generateHash(text);

    return hash;
  };
